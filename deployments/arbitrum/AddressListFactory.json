{
  "address": "0xc5CdF8CBE886FC5c1EF5CD4fdd599C975eC6BB54",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newList",
          "type": "address"
        }
      ],
      "name": "ListCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "createList",
      "outputs": [
        {
          "internalType": "address",
          "name": "listaddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "listAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "ours",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x04e1235a40a8a650d1080f9ff023f29a71c82937d58f23f8fb4b7f320986d64d",
  "receipt": {
    "to": null,
    "from": "0x1CbfaE0367a9B1e4Ac2c158E57B5F00cCb337271",
    "contractAddress": "0xc5CdF8CBE886FC5c1EF5CD4fdd599C975eC6BB54",
    "transactionIndex": 0,
    "gasUsed": "81460871",
    "logsBloom": "0x
    "blockHash": "0xc13a250688b337d438750015e566a8b73ad6200ac827de0977ebcf4f983230d6",
    "transactionHash": "0x04e1235a40a8a650d1080f9ff023f29a71c82937d58f23f8fb4b7f320986d64d",
    "logs": [],
    "blockNumber": 3441624,
    "cumulativeGasUsed": "63927971",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "4ff0320bf8f1bb0bd2421610786a72ba",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newList\",\"type\":\"address\"}],\"name\":\"ListCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"createList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"listaddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"listAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"ours\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AddressListFactory.sol\":\"AddressListFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        require(hasRole(getRoleAdmin(role), _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        require(hasRole(getRoleAdmin(role), _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x897b526c3c1b6196d7c2202b3dbb04b77513a40633c6083a00e8c11402011710\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/AddressList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./interfaces/IAddressList.sol\\\";\\nimport \\\"./EnumerableMap.sol\\\";\\n\\ncontract AddressList is AccessControl, IAddressList {\\n    using EnumerableMap for EnumerableMap.AddressToUintMap;\\n    EnumerableMap.AddressToUintMap private theList;\\n\\n    bytes32 public constant LIST_ADMIN = keccak256(\\\"LIST_ADMIN\\\");\\n\\n    modifier onlyListAdmin() {\\n        require(hasRole(LIST_ADMIN, msg.sender), \\\"Sender lacks LIST_ADMIN role\\\");\\n        _;\\n    }\\n\\n    // initialize owner and list-admin roles\\n    constructor(address owner) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, owner);\\n        _setupRole(LIST_ADMIN, owner);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////\\n\\n    // Anyone: query list entry at index N (no ordering guarantees)\\n    function at(uint256 index) external view override returns (address, uint256) {\\n        return theList.at(index);\\n    }\\n\\n    // Anyone: check list contains given address or.\\n    function contains(address a) external view override returns (bool) {\\n        return theList.contains(a);\\n    }\\n\\n    // Anyone: total list length\\n    function length() external view override returns (uint256) {\\n        return theList.length();\\n    }\\n\\n    // Anyone: query value associated with address.  returns zero if absent.\\n    function get(address a) external view override returns (uint256) {\\n        return theList.contains(a) ? theList.get(a) : 0;\\n    }\\n\\n    ///////////////////////////////////////////////////////////////\\n\\n    // Admin: add (address,1) to list\\n    function add(address a) external override onlyListAdmin returns (bool) {\\n        return _add(a, 1);\\n    }\\n\\n    // Admin: add (address, n) to list\\n    function addValue(address a, uint256 v) external override onlyListAdmin returns (bool) {\\n        return _add(a, v);\\n    }\\n\\n    // Admin: add multiple (address,1) items to list\\n    function addMulti(address[] calldata addrs) external override onlyListAdmin returns (uint256) {\\n        uint256 updated = 0;\\n        for (uint256 i = 0; i < addrs.length; i++) {\\n            if (_add(addrs[i], 1)) {\\n                updated++;\\n            }\\n        }\\n        return updated;\\n    }\\n\\n    // Admin: add multiple (address,n) items to list\\n    function addValueMulti(address[] calldata addrs, uint256[] calldata values)\\n        external\\n        override\\n        onlyListAdmin\\n        returns (uint256)\\n    {\\n        //solhint-disable-next-line reason-string\\n        require(addrs.length == values.length, \\\"Address and value array sizes must be equal\\\");\\n        uint256 updated = 0;\\n        for (uint256 i = 0; i < addrs.length; i++) {\\n            if (_add(addrs[i], values[i])) {\\n                updated++;\\n            }\\n        }\\n        return updated;\\n    }\\n\\n    // Admin: remove address from list\\n    function remove(address a) external override onlyListAdmin returns (bool) {\\n        return _remove(a);\\n    }\\n\\n    // Admin: remove multiple items from list\\n    function removeMulti(address[] calldata addrs) external override onlyListAdmin returns (uint256) {\\n        uint256 updated = 0;\\n        for (uint256 i = 0; i < addrs.length; i++) {\\n            if (_remove(addrs[i])) {\\n                updated++;\\n            }\\n        }\\n        return updated;\\n    }\\n\\n    ///////////////////////////////////////////////////////////////\\n\\n    function _add(address a, uint256 v) private returns (bool) {\\n        require(v != 0, \\\"Metadata value v cannot be zero\\\");\\n        if (!theList.contains(a) || theList.get(a) != v) {\\n            theList.set(a, v);\\n            emit AddressUpdated(a, msg.sender);\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    function _remove(address a) private returns (bool) {\\n        bool removed = theList.remove(a);\\n        if (removed) {\\n            emit AddressRemoved(a, msg.sender);\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0xcabaa4aa1ba779cdc370f6d9f483a1fed3ecdf416cd1342d9ebd6a1d27900fe9\",\"license\":\"MIT\"},\"contracts/AddressListFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"./interfaces/IAddressListFactory.sol\\\";\\nimport \\\"./AddressList.sol\\\";\\n\\ncontract AddressListFactory is IAddressListFactory {\\n    address[] private allLists;\\n    mapping(address => bool) private isOurs;\\n\\n    function ours(address a) external view override returns (bool) {\\n        return isOurs[a];\\n    }\\n\\n    function listCount() external view override returns (uint256) {\\n        return allLists.length;\\n    }\\n\\n    function listAt(uint256 idx) external view override returns (address) {\\n        require(idx < allLists.length, \\\"Index exceeds list length\\\");\\n        return allLists[idx];\\n    }\\n\\n    function createList() external override returns (address listaddr) {\\n        // create new address list contract\\n        listaddr = address(new AddressList(msg.sender));\\n\\n        // note our creation\\n        allLists.push(listaddr);\\n        isOurs[listaddr] = true;\\n\\n        // log our creation\\n        emit ListCreated(msg.sender, listaddr);\\n    }\\n}\\n\",\"keccak256\":\"0xe1dee0699759ff0a5018dd67fb51e33df17522369d56d85c329104d64fa580b7\",\"license\":\"MIT\"},\"contracts/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * only maps of type `address -> uint256` (`AddressToUintMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        // Storage of map keys and values\\n        MapEntry[] _entries;\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\n        // because index 0 means a key is not in the map.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(\\n        Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) {\\n            // Equivalent to !contains(map, key)\\n            map._entries.push(MapEntry({_key: key, _value: value}));\\n            // The entry is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            map._entries[keyIndex - 1]._value = value;\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) {\\n            // Equivalent to contains(map, key)\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = keyIndex - 1;\\n            uint256 lastIndex = map._entries.length - 1;\\n\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\n\\n            // Move the last entry to the index where the entry to delete is\\n            map._entries[toDeleteIndex] = lastEntry;\\n            // Update the index for the moved entry\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved entry was stored\\n            map._entries.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        //solhint-disable-next-line reason-string\\n        require(map._entries.length > index, \\\"EnumerableMap: index out of bounds\\\");\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        return _get(map, key, \\\"EnumerableMap: nonexistent key\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     */\\n    function _get(\\n        Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        AddressToUintMap storage map,\\n        address key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(_get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(_get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n}\\n\",\"keccak256\":\"0xb36e4f35c3d7d1f1f61eaebcad979e237c742b505992e75b8a0f08fad9d9b1fc\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IAddressList {\\n    event AddressUpdated(address indexed a, address indexed sender);\\n    event AddressRemoved(address indexed a, address indexed sender);\\n\\n    function add(address a) external returns (bool);\\n\\n    function addValue(address a, uint256 v) external returns (bool);\\n\\n    function addMulti(address[] calldata addrs) external returns (uint256);\\n\\n    function addValueMulti(address[] calldata addrs, uint256[] calldata values) external returns (uint256);\\n\\n    function remove(address a) external returns (bool);\\n\\n    function removeMulti(address[] calldata addrs) external returns (uint256);\\n\\n    function get(address a) external view returns (uint256);\\n\\n    function contains(address a) external view returns (bool);\\n\\n    function at(uint256 index) external view returns (address, uint256);\\n\\n    function length() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6c11f1df9bdd9a3d2f1149daca9eb5165881b66579e73c27cd7e91f61280bd0f\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressListFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IAddressListFactory {\\n    event ListCreated(address indexed _sender, address indexed _newList);\\n\\n    function ours(address a) external view returns (bool);\\n\\n    function listCount() external view returns (uint256);\\n\\n    function listAt(uint256 idx) external view returns (address);\\n\\n    function createList() external returns (address listaddr);\\n}\\n\",\"keccak256\":\"0x125374f6dc4dac1e0fe7f351581450b1ec2818f228d4b8d45133633fd4d9157f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506127bb806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630fab4d25146100515780631b68d10d1461006f57806381cc3ba41461008d57806392f65d9c146100bd575b600080fd5b6100596100ed565b604051610066919061042b565b60405180910390f35b61007761023c565b6040516100849190610481565b60405180910390f35b6100a760048036038101906100a29190610389565b610248565b6040516100b49190610446565b60405180910390f35b6100d760048036038101906100d291906103b2565b61029e565b6040516100e4919061042b565b60405180910390f35b6000336040516100fc90610352565b610106919061042b565b604051809103906000f080158015610122573d6000803e3d6000fd5b5090506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4bd63f068ee86f2b575ed8b0d85879e68002200703584a639a5ab8c8ad6e129460405160405180910390a390565b60008080549050905090565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000808054905082106102e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102dd90610461565b60405180910390fd5b60008281548110610320577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6122398061054d83390190565b60008135905061036e8161051e565b92915050565b60008135905061038381610535565b92915050565b60006020828403121561039b57600080fd5b60006103a98482850161035f565b91505092915050565b6000602082840312156103c457600080fd5b60006103d284828501610374565b91505092915050565b6103e4816104ad565b82525050565b6103f3816104bf565b82525050565b600061040660198361049c565b9150610411826104f5565b602082019050919050565b610425816104eb565b82525050565b600060208201905061044060008301846103db565b92915050565b600060208201905061045b60008301846103ea565b92915050565b6000602082019050818103600083015261047a816103f9565b9050919050565b6000602082019050610496600083018461041c565b92915050565b600082825260208201905092915050565b60006104b8826104cb565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f496e6465782065786365656473206c697374206c656e67746800000000000000600082015250565b610527816104ad565b811461053257600080fd5b50565b61053e816104eb565b811461054957600080fd5b5056fe60806040523480156200001157600080fd5b506040516200223938038062002239833981810160405281019062000037919062000215565b6200004c6000801b826200008560201b60201c565b6200007e7f679f35d3aa86a98333c7fc7439a0bc12a13be742ae62a4c1cc3820782a2e11a6826200008560201b60201c565b506200028f565b6200009782826200009b60201b60201c565b5050565b620000ad82826200018c60201b60201c565b6200018857600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506200012d620001f660201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b6000815190506200020f8162000275565b92915050565b6000602082840312156200022857600080fd5b60006200023884828501620001fe565b91505092915050565b60006200024e8262000255565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620002808162000241565b81146200028c57600080fd5b50565b611f9a806200029f6000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80635dbe47e8116100a2578063ca0b187811610071578063ca0b18781461033f578063d547741f1461036f578063d7d56f211461038b578063e0886f90146103a9578063e50d67d1146103da57610116565b80635dbe47e81461029157806391d14854146102c1578063a217fddf146102f1578063c2bc2efc1461030f57610116565b806329092d0e116100e957806329092d0e146101c95780632f2ff15d146101f95780633621da9b1461021557806336568abe146102455780633ba97cf11461026157610116565b806301ffc9a71461011b5780630a3b0a4f1461014b5780631f7b6d321461017b578063248a9ca314610199575b600080fd5b61013560048036038101906101309190611813565b61040a565b60405161014291906119f8565b60405180910390f35b6101656004803603810190610160919061168f565b610484565b60405161017291906119f8565b60405180910390f35b610183610501565b6040516101909190611b30565b60405180910390f35b6101b360048036038101906101ae91906117ae565b610512565b6040516101c09190611a13565b60405180910390f35b6101e360048036038101906101de919061168f565b610531565b6040516101f091906119f8565b60405180910390f35b610213600480360381019061020e91906117d7565b6105ac565b005b61022f600480360381019061022a91906116f4565b610612565b60405161023c9190611b30565b60405180910390f35b61025f600480360381019061025a91906117d7565b610714565b005b61027b60048036038101906102769190611739565b610797565b6040516102889190611b30565b60405180910390f35b6102ab60048036038101906102a6919061168f565b610923565b6040516102b891906119f8565b60405180910390f35b6102db60048036038101906102d691906117d7565b610940565b6040516102e891906119f8565b60405180910390f35b6102f96109aa565b6040516103069190611a13565b60405180910390f35b6103296004803603810190610324919061168f565b6109b1565b6040516103369190611b30565b60405180910390f35b610359600480360381019061035491906116b8565b6109ee565b60405161036691906119f8565b60405180910390f35b610389600480360381019061038491906117d7565b610a6b565b005b610393610ad1565b6040516103a09190611a13565b60405180910390f35b6103c360048036038101906103be919061183c565b610af5565b6040516103d19291906119cf565b60405180910390f35b6103f460048036038101906103ef91906116f4565b610b15565b6040516104019190611b30565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061047d575061047c82610c19565b5b9050919050565b60006104b07f679f35d3aa86a98333c7fc7439a0bc12a13be742ae62a4c1cc3820782a2e11a633610940565b6104ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e690611ab0565b60405180910390fd5b6104fa826001610c83565b9050919050565b600061050d6001610d85565b905090565b6000806000838152602001908152602001600020600101549050919050565b600061055d7f679f35d3aa86a98333c7fc7439a0bc12a13be742ae62a4c1cc3820782a2e11a633610940565b61059c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059390611ab0565b60405180910390fd5b6105a582610d9a565b9050919050565b6105c56105b883610512565b6105c0610e28565b610940565b610604576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fb90611a50565b60405180910390fd5b61060e8282610e30565b5050565b600061063e7f679f35d3aa86a98333c7fc7439a0bc12a13be742ae62a4c1cc3820782a2e11a633610940565b61067d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067490611ab0565b60405180910390fd5b6000805b84849050811015610709576106e28585838181106106c8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906106dd919061168f565b610d9a565b156106f65781806106f290611ca2565b9250505b808061070190611ca2565b915050610681565b508091505092915050565b61071c610e28565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610789576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078090611b10565b60405180910390fd5b6107938282610f10565b5050565b60006107c37f679f35d3aa86a98333c7fc7439a0bc12a13be742ae62a4c1cc3820782a2e11a633610940565b610802576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f990611ab0565b60405180910390fd5b82829050858590501461084a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084190611af0565b60405180910390fd5b6000805b86869050811015610916576108ef878783818110610895577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906108aa919061168f565b8686848181106108e3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135610c83565b156109035781806108ff90611ca2565b9250505b808061090e90611ca2565b91505061084e565b5080915050949350505050565b6000610939826001610ff190919063ffffffff16565b9050919050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b60006109c7826001610ff190919063ffffffff16565b6109d25760006109e7565b6109e682600161102190919063ffffffff16565b5b9050919050565b6000610a1a7f679f35d3aa86a98333c7fc7439a0bc12a13be742ae62a4c1cc3820782a2e11a633610940565b610a59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5090611ab0565b60405180910390fd5b610a638383610c83565b905092915050565b610a84610a7783610512565b610a7f610e28565b610940565b610ac3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aba90611a70565b60405180910390fd5b610acd8282610f10565b5050565b7f679f35d3aa86a98333c7fc7439a0bc12a13be742ae62a4c1cc3820782a2e11a681565b600080610b0c83600161105490919063ffffffff16565b91509150915091565b6000610b417f679f35d3aa86a98333c7fc7439a0bc12a13be742ae62a4c1cc3820782a2e11a633610940565b610b80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7790611ab0565b60405180910390fd5b6000805b84849050811015610c0e57610be7858583818110610bcb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610be0919061168f565b6001610c83565b15610bfb578180610bf790611ca2565b9250505b8080610c0690611ca2565b915050610b84565b508091505092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600080821415610cc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbf90611ad0565b60405180910390fd5b610cdc836001610ff190919063ffffffff16565b1580610cfb575081610cf884600161102190919063ffffffff16565b14155b15610d7a57610d16838360016110809092919063ffffffff16565b503373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f53d43647b4e7165b1dd70c590a9244d650c4d257cbb62b799357578e780579ad60405160405180910390a360019050610d7f565b600090505b92915050565b6000610d93826000016110b5565b9050919050565b600080610db18360016110c690919063ffffffff16565b90508015610e1d573373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f14c03038f91513ea128893e8d0865b80359ca07b96f819269baebe06732bb4ad60405160405180910390a36001915050610e23565b60009150505b919050565b600033905090565b610e3a8282610940565b610f0c57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610eb1610e28565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b610f1a8282610940565b15610fed57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610f92610e28565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6000611019836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6110f6565b905092915050565b6000611049836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611119565b60001c905092915050565b6000806000806110678660000186611163565b915091508160001c8160001c9350935050509250929050565b60006110ac846000018473ffffffffffffffffffffffffffffffffffffffff1660001b8460001b611213565b90509392505050565b600081600001805490509050919050565b60006110ee836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611325565b905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b600061115b83836040518060400160405280601e81526020017f456e756d657261626c654d61703a206e6f6e6578697374656e74206b657900008152506114e0565b905092915050565b600080828460000180549050116111af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a690611a90565b60405180910390fd5b60008460000184815481106111ed577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906002020190508060000154816001015492509250509250929050565b60008084600101600085815260200190815260200160002054905060008114156112ba5784600001604051806040016040528086815260200185815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000155602082015181600101555050846000018054905085600101600086815260200190815260200160002081905550600191505061131e565b82856000016001836112cc9190611bbd565b81548110611303577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600202016001018190555060009150505b9392505050565b600080836001016000848152602001908152602001600020549050600081146114d45760006001826113579190611bbd565b905060006001866000018054905061136f9190611bbd565b905060008660000182815481106113af577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600202019050808760000184815481106113fc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060020201600082015481600001556001820154816001015590505060018361142e9190611b67565b876001016000836000015481526020019081526020016000208190555086600001805480611485577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60019003818190600052602060002090600202016000808201600090556001820160009055505090558660010160008781526020019081526020016000206000905560019450505050506114da565b60009150505b92915050565b60008084600101600085815260200190815260200160002054905060008114158390611542576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115399190611a2e565b60405180910390fd5b50846000016001826115549190611bbd565b8154811061158b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060020201600101549150509392505050565b6000813590506115b681611f08565b92915050565b60008083601f8401126115ce57600080fd5b8235905067ffffffffffffffff8111156115e757600080fd5b6020830191508360208202830111156115ff57600080fd5b9250929050565b60008083601f84011261161857600080fd5b8235905067ffffffffffffffff81111561163157600080fd5b60208301915083602082028301111561164957600080fd5b9250929050565b60008135905061165f81611f1f565b92915050565b60008135905061167481611f36565b92915050565b60008135905061168981611f4d565b92915050565b6000602082840312156116a157600080fd5b60006116af848285016115a7565b91505092915050565b600080604083850312156116cb57600080fd5b60006116d9858286016115a7565b92505060206116ea8582860161167a565b9150509250929050565b6000806020838503121561170757600080fd5b600083013567ffffffffffffffff81111561172157600080fd5b61172d858286016115bc565b92509250509250929050565b6000806000806040858703121561174f57600080fd5b600085013567ffffffffffffffff81111561176957600080fd5b611775878288016115bc565b9450945050602085013567ffffffffffffffff81111561179457600080fd5b6117a087828801611606565b925092505092959194509250565b6000602082840312156117c057600080fd5b60006117ce84828501611650565b91505092915050565b600080604083850312156117ea57600080fd5b60006117f885828601611650565b9250506020611809858286016115a7565b9150509250929050565b60006020828403121561182557600080fd5b600061183384828501611665565b91505092915050565b60006020828403121561184e57600080fd5b600061185c8482850161167a565b91505092915050565b61186e81611bf1565b82525050565b61187d81611c03565b82525050565b61188c81611c0f565b82525050565b600061189d82611b4b565b6118a78185611b56565b93506118b7818560208601611c6f565b6118c081611d1a565b840191505092915050565b60006118d8602f83611b56565b91506118e382611d2b565b604082019050919050565b60006118fb603083611b56565b915061190682611d7a565b604082019050919050565b600061191e602283611b56565b915061192982611dc9565b604082019050919050565b6000611941601c83611b56565b915061194c82611e18565b602082019050919050565b6000611964601f83611b56565b915061196f82611e41565b602082019050919050565b6000611987602b83611b56565b915061199282611e6a565b604082019050919050565b60006119aa602f83611b56565b91506119b582611eb9565b604082019050919050565b6119c981611c65565b82525050565b60006040820190506119e46000830185611865565b6119f160208301846119c0565b9392505050565b6000602082019050611a0d6000830184611874565b92915050565b6000602082019050611a286000830184611883565b92915050565b60006020820190508181036000830152611a488184611892565b905092915050565b60006020820190508181036000830152611a69816118cb565b9050919050565b60006020820190508181036000830152611a89816118ee565b9050919050565b60006020820190508181036000830152611aa981611911565b9050919050565b60006020820190508181036000830152611ac981611934565b9050919050565b60006020820190508181036000830152611ae981611957565b9050919050565b60006020820190508181036000830152611b098161197a565b9050919050565b60006020820190508181036000830152611b298161199d565b9050919050565b6000602082019050611b4560008301846119c0565b92915050565b600081519050919050565b600082825260208201905092915050565b6000611b7282611c65565b9150611b7d83611c65565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611bb257611bb1611ceb565b5b828201905092915050565b6000611bc882611c65565b9150611bd383611c65565b925082821015611be657611be5611ceb565b5b828203905092915050565b6000611bfc82611c45565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015611c8d578082015181840152602081019050611c72565b83811115611c9c576000848401525b50505050565b6000611cad82611c65565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611ce057611cdf611ceb565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60008201527f2061646d696e20746f206772616e740000000000000000000000000000000000602082015250565b7f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60008201527f2061646d696e20746f207265766f6b6500000000000000000000000000000000602082015250565b7f456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e60008201527f6473000000000000000000000000000000000000000000000000000000000000602082015250565b7f53656e646572206c61636b73204c4953545f41444d494e20726f6c6500000000600082015250565b7f4d657461646174612076616c756520762063616e6e6f74206265207a65726f00600082015250565b7f4164647265737320616e642076616c75652061727261792073697a6573206d7560008201527f737420626520657175616c000000000000000000000000000000000000000000602082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b611f1181611bf1565b8114611f1c57600080fd5b50565b611f2881611c0f565b8114611f3357600080fd5b50565b611f3f81611c19565b8114611f4a57600080fd5b50565b611f5681611c65565b8114611f6157600080fd5b5056fea264697066735822122031ff3b478d349d148fa39209e16b5b2318dd30bafb4ef83f06097558c0ed152164736f6c63430008030033a2646970667358221220af8136aa4698564d950418797cc9fbb92ab4c79e76049b24561d3b8dd71e7f5864736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80630fab4d25146100515780631b68d10d1461006f57806381cc3ba41461008d57806392f65d9c146100bd575b600080fd5b6100596100ed565b604051610066919061042b565b60405180910390f35b61007761023c565b6040516100849190610481565b60405180910390f35b6100a760048036038101906100a29190610389565b610248565b6040516100b49190610446565b60405180910390f35b6100d760048036038101906100d291906103b2565b61029e565b6040516100e4919061042b565b60405180910390f35b6000336040516100fc90610352565b610106919061042b565b604051809103906000f080158015610122573d6000803e3d6000fd5b5090506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4bd63f068ee86f2b575ed8b0d85879e68002200703584a639a5ab8c8ad6e129460405160405180910390a390565b60008080549050905090565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000808054905082106102e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102dd90610461565b60405180910390fd5b60008281548110610320577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6122398061054d83390190565b60008135905061036e8161051e565b92915050565b60008135905061038381610535565b92915050565b60006020828403121561039b57600080fd5b60006103a98482850161035f565b91505092915050565b6000602082840312156103c457600080fd5b60006103d284828501610374565b91505092915050565b6103e4816104ad565b82525050565b6103f3816104bf565b82525050565b600061040660198361049c565b9150610411826104f5565b602082019050919050565b610425816104eb565b82525050565b600060208201905061044060008301846103db565b92915050565b600060208201905061045b60008301846103ea565b92915050565b6000602082019050818103600083015261047a816103f9565b9050919050565b6000602082019050610496600083018461041c565b92915050565b600082825260208201905092915050565b60006104b8826104cb565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f496e6465782065786365656473206c697374206c656e67746800000000000000600082015250565b610527816104ad565b811461053257600080fd5b50565b61053e816104eb565b811461054957600080fd5b5056fe60806040523480156200001157600080fd5b506040516200223938038062002239833981810160405281019062000037919062000215565b6200004c6000801b826200008560201b60201c565b6200007e7f679f35d3aa86a98333c7fc7439a0bc12a13be742ae62a4c1cc3820782a2e11a6826200008560201b60201c565b506200028f565b6200009782826200009b60201b60201c565b5050565b620000ad82826200018c60201b60201c565b6200018857600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506200012d620001f660201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b6000815190506200020f8162000275565b92915050565b6000602082840312156200022857600080fd5b60006200023884828501620001fe565b91505092915050565b60006200024e8262000255565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620002808162000241565b81146200028c57600080fd5b50565b611f9a806200029f6000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80635dbe47e8116100a2578063ca0b187811610071578063ca0b18781461033f578063d547741f1461036f578063d7d56f211461038b578063e0886f90146103a9578063e50d67d1146103da57610116565b80635dbe47e81461029157806391d14854146102c1578063a217fddf146102f1578063c2bc2efc1461030f57610116565b806329092d0e116100e957806329092d0e146101c95780632f2ff15d146101f95780633621da9b1461021557806336568abe146102455780633ba97cf11461026157610116565b806301ffc9a71461011b5780630a3b0a4f1461014b5780631f7b6d321461017b578063248a9ca314610199575b600080fd5b61013560048036038101906101309190611813565b61040a565b60405161014291906119f8565b60405180910390f35b6101656004803603810190610160919061168f565b610484565b60405161017291906119f8565b60405180910390f35b610183610501565b6040516101909190611b30565b60405180910390f35b6101b360048036038101906101ae91906117ae565b610512565b6040516101c09190611a13565b60405180910390f35b6101e360048036038101906101de919061168f565b610531565b6040516101f091906119f8565b60405180910390f35b610213600480360381019061020e91906117d7565b6105ac565b005b61022f600480360381019061022a91906116f4565b610612565b60405161023c9190611b30565b60405180910390f35b61025f600480360381019061025a91906117d7565b610714565b005b61027b60048036038101906102769190611739565b610797565b6040516102889190611b30565b60405180910390f35b6102ab60048036038101906102a6919061168f565b610923565b6040516102b891906119f8565b60405180910390f35b6102db60048036038101906102d691906117d7565b610940565b6040516102e891906119f8565b60405180910390f35b6102f96109aa565b6040516103069190611a13565b60405180910390f35b6103296004803603810190610324919061168f565b6109b1565b6040516103369190611b30565b60405180910390f35b610359600480360381019061035491906116b8565b6109ee565b60405161036691906119f8565b60405180910390f35b610389600480360381019061038491906117d7565b610a6b565b005b610393610ad1565b6040516103a09190611a13565b60405180910390f35b6103c360048036038101906103be919061183c565b610af5565b6040516103d19291906119cf565b60405180910390f35b6103f460048036038101906103ef91906116f4565b610b15565b6040516104019190611b30565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061047d575061047c82610c19565b5b9050919050565b60006104b07f679f35d3aa86a98333c7fc7439a0bc12a13be742ae62a4c1cc3820782a2e11a633610940565b6104ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e690611ab0565b60405180910390fd5b6104fa826001610c83565b9050919050565b600061050d6001610d85565b905090565b6000806000838152602001908152602001600020600101549050919050565b600061055d7f679f35d3aa86a98333c7fc7439a0bc12a13be742ae62a4c1cc3820782a2e11a633610940565b61059c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059390611ab0565b60405180910390fd5b6105a582610d9a565b9050919050565b6105c56105b883610512565b6105c0610e28565b610940565b610604576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fb90611a50565b60405180910390fd5b61060e8282610e30565b5050565b600061063e7f679f35d3aa86a98333c7fc7439a0bc12a13be742ae62a4c1cc3820782a2e11a633610940565b61067d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067490611ab0565b60405180910390fd5b6000805b84849050811015610709576106e28585838181106106c8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906106dd919061168f565b610d9a565b156106f65781806106f290611ca2565b9250505b808061070190611ca2565b915050610681565b508091505092915050565b61071c610e28565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610789576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078090611b10565b60405180910390fd5b6107938282610f10565b5050565b60006107c37f679f35d3aa86a98333c7fc7439a0bc12a13be742ae62a4c1cc3820782a2e11a633610940565b610802576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f990611ab0565b60405180910390fd5b82829050858590501461084a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084190611af0565b60405180910390fd5b6000805b86869050811015610916576108ef878783818110610895577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906108aa919061168f565b8686848181106108e3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135610c83565b156109035781806108ff90611ca2565b9250505b808061090e90611ca2565b91505061084e565b5080915050949350505050565b6000610939826001610ff190919063ffffffff16565b9050919050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b60006109c7826001610ff190919063ffffffff16565b6109d25760006109e7565b6109e682600161102190919063ffffffff16565b5b9050919050565b6000610a1a7f679f35d3aa86a98333c7fc7439a0bc12a13be742ae62a4c1cc3820782a2e11a633610940565b610a59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5090611ab0565b60405180910390fd5b610a638383610c83565b905092915050565b610a84610a7783610512565b610a7f610e28565b610940565b610ac3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aba90611a70565b60405180910390fd5b610acd8282610f10565b5050565b7f679f35d3aa86a98333c7fc7439a0bc12a13be742ae62a4c1cc3820782a2e11a681565b600080610b0c83600161105490919063ffffffff16565b91509150915091565b6000610b417f679f35d3aa86a98333c7fc7439a0bc12a13be742ae62a4c1cc3820782a2e11a633610940565b610b80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7790611ab0565b60405180910390fd5b6000805b84849050811015610c0e57610be7858583818110610bcb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610be0919061168f565b6001610c83565b15610bfb578180610bf790611ca2565b9250505b8080610c0690611ca2565b915050610b84565b508091505092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600080821415610cc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbf90611ad0565b60405180910390fd5b610cdc836001610ff190919063ffffffff16565b1580610cfb575081610cf884600161102190919063ffffffff16565b14155b15610d7a57610d16838360016110809092919063ffffffff16565b503373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f53d43647b4e7165b1dd70c590a9244d650c4d257cbb62b799357578e780579ad60405160405180910390a360019050610d7f565b600090505b92915050565b6000610d93826000016110b5565b9050919050565b600080610db18360016110c690919063ffffffff16565b90508015610e1d573373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f14c03038f91513ea128893e8d0865b80359ca07b96f819269baebe06732bb4ad60405160405180910390a36001915050610e23565b60009150505b919050565b600033905090565b610e3a8282610940565b610f0c57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610eb1610e28565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b610f1a8282610940565b15610fed57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610f92610e28565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6000611019836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6110f6565b905092915050565b6000611049836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611119565b60001c905092915050565b6000806000806110678660000186611163565b915091508160001c8160001c9350935050509250929050565b60006110ac846000018473ffffffffffffffffffffffffffffffffffffffff1660001b8460001b611213565b90509392505050565b600081600001805490509050919050565b60006110ee836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611325565b905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b600061115b83836040518060400160405280601e81526020017f456e756d657261626c654d61703a206e6f6e6578697374656e74206b657900008152506114e0565b905092915050565b600080828460000180549050116111af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a690611a90565b60405180910390fd5b60008460000184815481106111ed577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906002020190508060000154816001015492509250509250929050565b60008084600101600085815260200190815260200160002054905060008114156112ba5784600001604051806040016040528086815260200185815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000155602082015181600101555050846000018054905085600101600086815260200190815260200160002081905550600191505061131e565b82856000016001836112cc9190611bbd565b81548110611303577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600202016001018190555060009150505b9392505050565b600080836001016000848152602001908152602001600020549050600081146114d45760006001826113579190611bbd565b905060006001866000018054905061136f9190611bbd565b905060008660000182815481106113af577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600202019050808760000184815481106113fc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060020201600082015481600001556001820154816001015590505060018361142e9190611b67565b876001016000836000015481526020019081526020016000208190555086600001805480611485577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60019003818190600052602060002090600202016000808201600090556001820160009055505090558660010160008781526020019081526020016000206000905560019450505050506114da565b60009150505b92915050565b60008084600101600085815260200190815260200160002054905060008114158390611542576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115399190611a2e565b60405180910390fd5b50846000016001826115549190611bbd565b8154811061158b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060020201600101549150509392505050565b6000813590506115b681611f08565b92915050565b60008083601f8401126115ce57600080fd5b8235905067ffffffffffffffff8111156115e757600080fd5b6020830191508360208202830111156115ff57600080fd5b9250929050565b60008083601f84011261161857600080fd5b8235905067ffffffffffffffff81111561163157600080fd5b60208301915083602082028301111561164957600080fd5b9250929050565b60008135905061165f81611f1f565b92915050565b60008135905061167481611f36565b92915050565b60008135905061168981611f4d565b92915050565b6000602082840312156116a157600080fd5b60006116af848285016115a7565b91505092915050565b600080604083850312156116cb57600080fd5b60006116d9858286016115a7565b92505060206116ea8582860161167a565b9150509250929050565b6000806020838503121561170757600080fd5b600083013567ffffffffffffffff81111561172157600080fd5b61172d858286016115bc565b92509250509250929050565b6000806000806040858703121561174f57600080fd5b600085013567ffffffffffffffff81111561176957600080fd5b611775878288016115bc565b9450945050602085013567ffffffffffffffff81111561179457600080fd5b6117a087828801611606565b925092505092959194509250565b6000602082840312156117c057600080fd5b60006117ce84828501611650565b91505092915050565b600080604083850312156117ea57600080fd5b60006117f885828601611650565b9250506020611809858286016115a7565b9150509250929050565b60006020828403121561182557600080fd5b600061183384828501611665565b91505092915050565b60006020828403121561184e57600080fd5b600061185c8482850161167a565b91505092915050565b61186e81611bf1565b82525050565b61187d81611c03565b82525050565b61188c81611c0f565b82525050565b600061189d82611b4b565b6118a78185611b56565b93506118b7818560208601611c6f565b6118c081611d1a565b840191505092915050565b60006118d8602f83611b56565b91506118e382611d2b565b604082019050919050565b60006118fb603083611b56565b915061190682611d7a565b604082019050919050565b600061191e602283611b56565b915061192982611dc9565b604082019050919050565b6000611941601c83611b56565b915061194c82611e18565b602082019050919050565b6000611964601f83611b56565b915061196f82611e41565b602082019050919050565b6000611987602b83611b56565b915061199282611e6a565b604082019050919050565b60006119aa602f83611b56565b91506119b582611eb9565b604082019050919050565b6119c981611c65565b82525050565b60006040820190506119e46000830185611865565b6119f160208301846119c0565b9392505050565b6000602082019050611a0d6000830184611874565b92915050565b6000602082019050611a286000830184611883565b92915050565b60006020820190508181036000830152611a488184611892565b905092915050565b60006020820190508181036000830152611a69816118cb565b9050919050565b60006020820190508181036000830152611a89816118ee565b9050919050565b60006020820190508181036000830152611aa981611911565b9050919050565b60006020820190508181036000830152611ac981611934565b9050919050565b60006020820190508181036000830152611ae981611957565b9050919050565b60006020820190508181036000830152611b098161197a565b9050919050565b60006020820190508181036000830152611b298161199d565b9050919050565b6000602082019050611b4560008301846119c0565b92915050565b600081519050919050565b600082825260208201905092915050565b6000611b7282611c65565b9150611b7d83611c65565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611bb257611bb1611ceb565b5b828201905092915050565b6000611bc882611c65565b9150611bd383611c65565b925082821015611be657611be5611ceb565b5b828203905092915050565b6000611bfc82611c45565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015611c8d578082015181840152602081019050611c72565b83811115611c9c576000848401525b50505050565b6000611cad82611c65565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611ce057611cdf611ceb565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60008201527f2061646d696e20746f206772616e740000000000000000000000000000000000602082015250565b7f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60008201527f2061646d696e20746f207265766f6b6500000000000000000000000000000000602082015250565b7f456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e60008201527f6473000000000000000000000000000000000000000000000000000000000000602082015250565b7f53656e646572206c61636b73204c4953545f41444d494e20726f6c6500000000600082015250565b7f4d657461646174612076616c756520762063616e6e6f74206265207a65726f00600082015250565b7f4164647265737320616e642076616c75652061727261792073697a6573206d7560008201527f737420626520657175616c000000000000000000000000000000000000000000602082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b611f1181611bf1565b8114611f1c57600080fd5b50565b611f2881611c0f565b8114611f3357600080fd5b50565b611f3f81611c19565b8114611f4a57600080fd5b50565b611f5681611c65565b8114611f6157600080fd5b5056fea264697066735822122031ff3b478d349d148fa39209e16b5b2318dd30bafb4ef83f06097558c0ed152164736f6c63430008030033a2646970667358221220af8136aa4698564d950418797cc9fbb92ab4c79e76049b24561d3b8dd71e7f5864736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 766,
        "contract": "contracts/AddressListFactory.sol:AddressListFactory",
        "label": "allLists",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 770,
        "contract": "contracts/AddressListFactory.sol:AddressListFactory",
        "label": "isOurs",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}